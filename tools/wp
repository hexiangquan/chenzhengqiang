#/bin/bash
#start date:2015/11/8
#author:chenzhengqiang
#desc:for creating the basic directories of the entire project

function write_readme(){
	echo "#@Author:chenzhengqiang" >> README
	echo "#@Start date:`date '+%Y/%m/%d %H:%M:%S'`" >> README
	echo "#@Modified date:" >> README
	echo >> README
	echo >> README
	echo "Copyright" >> README
	echo "---------" >> README
	echo >> README
	echo "#write the copyright information here" >> README
	echo >> README
	echo "Requirements" >> README
	echo "------------" >> README
	echo "#write the requirements of this software here" >> README
	echo >> README
	echo "Build instructions" >> README
	echo "------------------" >> README
	echo "#write the detailed build instructions here" >> README
	echo >> README
	echo "Structure" >> README
	echo "---------" >> README
	echo "#write the structure of project here" >> README
	echo >> README
	echo "Usage" >> README
	echo "-----" >> README
	echo "#write the usage of software here" >> README
}



function create_autogen_scripts(){
	`rm -f autogen.sh`
	`touch autogen.sh`
	`chmod u+rwx autogen.sh`
    echo "#file name:autogen.sh" >> autogen.sh
	echo "#author:chenzhengqiang" >> autogen.sh
	echo "#start date:`date '+%Y/%m/%d %H:%M:%S'`" >> autogen.sh
	echo "#modified date:" >> autogen.sh
	echo "#desc:auto generate the Makefile" >> autogen.sh
	echo "#!/bin/bash" >> autogen.sh
	echo "#########global configuration#######" >> autogen.sh
	echo 'TARGET="write the target of compiler here"' >> autogen.sh
	echo "MAIN_FILE=main" >> autogen.sh
	echo "AUTHOR=chenzhengqiang" >> autogen.sh
	echo "DATE=\`date '+%Y/%m/%d %H:%M:%S'\`" >> autogen.sh
	echo "COMPILER=g++" >> autogen.sh
	echo "COMPILER_FLAGS=\"-pg -g -W -Wall -Werror -Wshadow -Wconversion -Wextra -Wunused-parameter -Wdeprecated\"" >> autogen.sh
	echo "#define the optimize level" >> autogen.sh
	echo "OLEVEL=0" >> autogen.sh
	echo 'MAKEFILE=./Makefile' >> autogen.sh
	echo 'LDCONFIG="write the load config your program need here:e.g. -lpthread -lmath"' >> autogen.sh
	echo "SOURCE_DIR=./src" >> autogen.sh
	echo "INCLUDE_DIR=./include" >> autogen.sh
	echo "INSTALL_DIR=/usr/local/bin" >> autogen.sh
	echo "#you didn't have to configure this" >> autogen.sh
	echo "CONFIG_PATH=" >> autogen.sh
	echo "CONFIG_INSTALL_PATH=" >> autogen.sh
	echo "SERVICE=" >> autogen.sh
	echo "#########global configuration#######" >> autogen.sh
	echo "\`rm -rf \$MAKEFILE\`" >> autogen.sh
	echo "\`touch \$MAKEFILE\`" >> autogen.sh
	echo 'echo "#author:$AUTHOR" >> $MAKEFILE' >> autogen.sh
	echo 'echo "#generate date:$DATE" >> $MAKEFILE' >> autogen.sh
	echo 'echo >> $MAKEFILE' >> autogen.sh
	echo 'echo >> $MAKEFILE' >> autogen.sh

	echo 'echo "INCLUDE_DIR:=$INCLUDE_DIR" >> $MAKEFILE' >> autogen.sh
	echo 'echo "SOURCE_DIR:=$SOURCE_DIR" >> $MAKEFILE' >> autogen.sh
	echo "echo >> \$MAKEFILE" >> autogen.sh

	echo "if [ -z \"\$COMPILER\" ];then" >> autogen.sh
	echo "    echo 'SUFFIX:=cpp' >> \$MAKEFILE" >> autogen.sh
	echo "elif [ \"\$COMPILER\" == \"g++\" ];then" >> autogen.sh
	echo "    echo 'SUFFIX:=cpp' >> \$MAKEFILE" >> autogen.sh
	echo "elif [ \"\$COMPILER\" == \"gcc\" ];then" >> autogen.sh
	echo "    echo 'SUFFIX:=c' >> \$MAKEFILE" >> autogen.sh
	echo "else" >> autogen.sh 
	echo "    echo plese check the autogen\'s configuration" >> autogen.sh
	echo "exit 99" >> autogen.sh
	echo "fi" >> autogen.sh
        echo 'echo "vpath %.h \$(INCLUDE_DIR)" >> $MAKEFILE' >> autogen.sh
	echo 'echo "vpath %.\$(SUFFIX) \$(SOURCE_DIR)" >> $MAKEFILE' >> autogen.sh
	echo 'echo >> $MAKEFILE' >> autogen.sh

	echo 'echo "TARGET:=$TARGET" >> $MAKEFILE' >> autogen.sh
	echo 'echo "CC:=$COMPILER" >> $MAKEFILE' >> autogen.sh
	echo 'echo "#define the optimize level of compiler" >> $MAKEFILE' >> autogen.sh
	echo 'echo "OLEVEL=$OLEVEL" >> $MAKEFILE' >> autogen.sh
	echo 'echo "LDCONFIG:=$LDCONFIG" >> $MAKEFILE' >> autogen.sh
	echo 'echo "COMPILER_FLAGS=-pg -g -W -Wall -Wextra -Wconversion -Wshadow" >> $MAKEFILE' >> autogen.sh
	echo 'echo "CFLAGS:=-O\$(OLEVEL)  -I\$(INCLUDE_DIR) \$(COMPILER_FLAGS) \$(LDCONFIG)" >> $MAKEFILE' >> autogen.sh

	echo 'for cpp_file in `ls $SOURCE_DIR`' >> autogen.sh 
	echo 'do' >> autogen.sh
	echo '    obj=${cpp_file%%.*}' >> autogen.sh
	echo '    OBJS="$obj $OBJS"' >> autogen.sh	
	echo 'done' >> autogen.sh

	echo 'echo "OBJS:=$MAIN_FILE $OBJS" >> $MAKEFILE' >> autogen.sh
	echo 'echo "OBJS:=\$(foreach obj,\$(OBJS),\$(obj).o)" >> $MAKEFILE' >> autogen.sh
	echo 'echo >> $MAKEFILE' >> autogen.sh

	echo 'echo "INSTALL_DIR:=$INSTALL_DIR" >> $MAKEFILE' >> autogen.sh
	echo 'echo "CONFIG_PATH:=$CONFIG_PATH" >> $MAKEFILE' >> autogen.sh
	echo 'echo "SERVICE:=$SERVICE" >> $MAKEFILE' >> autogen.sh
	echo 'echo "CONFIG_INSTALL_PATH:=$CONFIG_INSTALL_PATH" >> $MAKEFILE' >> autogen.sh
	echo 'echo "TAR_NAME=\$(TARGET)-\$(shell date "+%Y%m%d")" >> $MAKEFILE' >> autogen.sh
	echo 'echo >> $MAKEFILE' >> autogen.sh
	echo 'echo ".PHONEY:clean" >> $MAKEFILE' >> autogen.sh
	echo 'echo ".PHONEY:install" >> $MAKEFILE' >> autogen.sh
    echo 'echo ".PHONEY:test" >> $MAKEFILE' >> autogen.sh
	echo 'echo ".PHONEY:tar" >> $MAKEFILE' >> autogen.sh
	echo 'echo >> $MAKEFILE' >> autogen.sh
	echo 'echo "all:\$(TARGET)" >> $MAKEFILE' >> autogen.sh
	echo 'echo "\$(TARGET):\$(OBJS)" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t\$(CC) -o \$@ \$^ \$(CFLAGS)" >> $MAKEFILE' >> autogen.sh
	echo 'echo "\$(OBJS):%.o:%.\$(SUFFIX)" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t\$(CC) -o \$@ -c \$< \$(CFLAGS)" >> $MAKEFILE' >> autogen.sh
	echo 'echo >> $MAKEFILE' >> autogen.sh
	echo 'echo "clean:" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t-rm -f *.o *.a *.so *.log *core* \$(TARGET) *.tar.gz *.cppe" >> $MAKEFILE' >> autogen.sh

    echo 'echo >> $MAKEFILE' >> autogen.sh

	echo 'echo "install:" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t-mv \$(TARGET) \$(INSTALL_DIR)" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t-cp -f \$(SERVICE) /etc/init.d/\$(TARGET)" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t-rm -rf \$(CONFIG_INSTALL_PATH)" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t-mkdir \$(CONFIG_INSTALL_PATH)" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t-cp -f \$(CONFIG_PATH)/* \$(CONFIG_INSTALL_PATH)" >> $MAKEFILE' >> autogen.sh
	echo 'echo >> $MAKEFILE' >> autogen.sh

	echo 'echo "test:" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\t./\$(TARGET)" >> $MAKEFILE' >> autogen.sh
	echo 'echo "tar:" >> $MAKEFILE' >> autogen.sh
	echo 'echo -e "\ttar -cvzf \$(TAR_NAME).tar.gz ." >> $MAKEFILE' >> autogen.sh

}



function create_service_scripts(){
	if [ ! -e "./scripts/service" ];then
		`rm -rf scripts`
		`mkdir scripts`
		`touch scripts/service`
		`chmod u+rwx scripts/service`
	fi
		
	echo '#!/bin/bash' >> scripts/service
	echo '#scripts name:' >> scripts/service
	echo '#author:chenzhengqiang' >> scripts/service
	echo "#generate date:`date '+%Y/%m/%d %H:%M:%S'`" >> scripts/service
	echo '#modified date:' >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo '#information about this service' >> scripts/service
	echo '#service name:#you must fill the service name right here' >> scripts/service 
	echo 'service=#you must fill the service name right here' >> scripts/service
	echo 'args=' >> scripts/service
	echo 'go=/usr/local/bin/$service $args' >> scripts/service
	echo 'pid_file=/var/run/$service.pid' >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo 'function start(){' >> scripts/service
	echo 'pid=`pidof $service`' >> scripts/service
	echo 'if [ -n "$pid" ];then' >> scripts/service
	echo 'echo "Start failed,Service $service(pid $pid) Is Running."' >> scripts/service
	echo 'exit 0' >> scripts/service
	echo 'fi' >> scripts/service
	echo 'echo -n "Starting Service $service......"' >> scripts/service
	echo 'touch $pid_file' >> scripts/service
	echo '$go' >> scripts/service
	echo 'pid=`pidof $service`' >> scripts/service 
	echo 'echo $pid > $pid_file' >> scripts/service
	echo 'sleep 0.3' >> scripts/service
	echo 'echo "(pid $pid)          [    OK    ]"' >> scripts/service
	echo 'pid=`pidof $service`' >> scripts/service
	echo '}' >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo 'function stop(){' >> scripts/service
	echo 'pid=`pidof $service`' >> scripts/service
	echo 'if [ -n "$pid" ];then' >> scripts/service
	echo 'echo -n "Shuting Down Service $service......"' >> scripts/service
	echo 'sleep 0.3' >> scripts/service                                    
    echo 'kill -9 $pid' >> scripts/service
	echo 'if [ $? -eq 0 ];then' >> scripts/service
	echo 'echo "                    [    OK    ]"' >> scripts/service
	echo 'else' >> scripts/service
	echo 'echo "(pid $pid)	  [   FAILED ]"' >> scripts/service
	echo 'fi' >> scripts/service
	echo 'else' >> scripts/service
	echo 'echo "Error:Service $service Is Not Running."' >> scripts/service
	echo 'fi' >> scripts/service
	echo 'rm -rf $lock' >> scripts/service
	echo 'rm -rf $pid_file' >> scripts/service
	echo '}' >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo 'function status(){' >> scripts/service
	echo 'pid=`pidof $service`' >> scripts/service
	echo 'if [ -n "$pid" ];then' >> scripts/service
	echo 'echo "Service $service(pid $pid) Is Running"' >> scripts/service
	echo 'else' >> scripts/service
	echo 'echo "Service $service Has Stoped"' >> scripts/service
	echo 'fi' >> scripts/service
	echo '}' >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo 'function restart(){' >> scripts/service
	echo 'stop' >> scripts/service
	echo 'start' >> scripts/service
	echo '}' >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo >> scripts/service
	echo 'case "$1" in' >> scripts/service
	echo '"start") start;;' >> scripts/service
	echo '"stop")  stop;;' >> scripts/service
	echo '"status") status;;' >> scripts/service
	echo '"restart") restart;;' >> scripts/service
	echo 'esac' >> scripts/service
}


function create_config(){
	need_write=0;
	if [ ! -d "config" ];then
		`rm -f config`
		`mkdir config && touch config/server.conf`
		need_write=1
	elif [ ! -e "config/server.conf" ];then
		`touch config/server.conf`
		need_write=1 			
	fi
	
	if [ $need_write -eq 1 ];then
		echo '#file name:server.conf' >> config/server.conf
		echo '#author:chenzhengqiang' >> config/server.conf
		echo "#start date:`date +%Y/%m/%d`" >> config/server.conf
		echo "#desc:server's config file" >> config/server.conf
		echo >> config/server.conf
		echo '[META]' >> config/server.conf
		echo 'author=chenzhengqiang' >> config/server.conf
		echo "start-date=`date +%Y/%m/%d`" >> config/server.conf
		echo 'service=' >> config/server.conf
		echo 'version=' >> config/server.conf
		echo 'copyright=2015-2025 chenzhengqiang.' >> config/server.conf
		echo >> config/server.conf
		echo '[SERVER]' >> config/server.conf
		echo 'CC=gcc version 4.4.7' >> config/server.conf
		echo 'protocol=rtmp' >> config/server.conf
		echo 'bind-address=0.0.0.0' >> config/server.conf
		echo '#write the bind port here' >> config/server.conf
		echo 'bind-port=' >> config/server.conf
		echo '#write the log file here' >> config/server.conf
		echo 'log-file=' >> config/server.conf
		echo '#set the refresh frequence of log file by seconds' >> config/server.conf
		echo '#0 indicates flush the log immediately' >> config/server.conf
		echo 'flush-time=0' >> config/server.conf
		echo '#run as daemon with "yes",otherwise no' >> config/server.conf
		echo 'daemon=yes' >> config/server.conf
		echo >> config/server.conf
		echo >> config/server.conf
		echo '#LOG LEVEL' >> config/server.conf
		echo '#LOG_ERROR    0' >> config/server.conf
		echo '#LOG_INFO     1' >> config/server.conf
		echo '#LOG_DEBUG    2' >> config/server.conf
		echo >> config/server.conf
		echo >> config/server.conf
		echo 'log-level=3' >> config/server.conf
		echo 'keep-alive=yes' >> config/server.conf
		echo 'backlog=10' >> config/server.conf
		echo >> config/server.conf
		echo >> config/server.conf
		echo '[USAGE]' >> config/server.conf
		echo '#write the usage of this software here' >> config/server.conf
		echo '#the following is a template' >> config/server.conf
		echo 'Usage:' >> config/server.conf
		echo 'Startup the xtrartmp server or list information about it:version,help info etc.' >> config/server.conf
		echo 'Mandatory arguments to long options are mandatory for short options too.' >> config/server.conf
		echo '-f, --config-file, specify the config file' >> config/server.conf
		echo '-h, --help, display help and exit' >> config/server.conf
		echo '-v, --version, display version and exit' >> config/server.conf
		echo 'Example:' >> config/server.conf
		echo 'xtrartmp  /*startup this xtrartmp server through default config file*/' >> config/server.conf
		echo 'xtrartmp -h' >> config/server.conf
		echo 'xtrartmp -v' >> config/server.conf
		echo 'xtrartmp --config-file /etc/xtrartmp/server.conf' >> config/server.conf
	fi	
}


function create_all_basic_files(){
if [ ! -e "src" ];then
	mkdir src
fi

if [ ! -e "include" ];then
	mkdir include
fi

if [ ! -e "unit" ];then
	mkdir unit
fi

if [ ! -e "tools" ];then
	mkdir tools
fi

if [ ! -e "lib" ];then
	mkdir lib
fi

if [ ! -e "README" ];then
	touch README
	write_readme;	
fi
create_autogen_scripts
create_config;
create_service_scripts;
}

create_all_basic_files;
